out_dir: results                 # Directory for output results
metric_best: accuracy            # Main metric to track for best model
metric_agg: mean                 # Aggregation method for metrics
wandb:
  use: False                     # Toggle to use Weights & Biases for tracking
  project: exphormer_classification  # Weights & Biases project name
dataset:
  format: CustomHetero           # Custom dataset format identifier
  name: Neo4jHeteroGraph         # Custom dataset name
  database : ome-alerts
  task: graph                    # Task type
  task_type: classification      # Specific task
  transductive: False            # Transductive learning setting
  node_encoder: True             # Using node encoder
  node_encoder_name: SBERT       # Name of node encoder (assuming SBERT embeddings are used)
  node_encoder_bn: False         # Batch normalization toggle for node encoder
  edge_encoder: True             # Using edge encoder
  edge_encoder_name: RelationshipWeight  # Name for edge encoder
  edge_encoder_bn: False         # Batch normalization toggle for edge encoder
pretrained:
  dir: pretrained/neo4j_classification.deep  # Directory for pretrained models
  reset_prediction_head: True    # Reset the prediction head for the task
train:
  mode: Neo4jClassification      # Custom training mode
  batch_size: 64                 # Batch size for training
model:
  type: Exphormer                # Model type
  loss_fun: BinaryCrossEntropy   # Loss function for binary classification
  graph_pooling: mean            # Pooling method for graph-level representation
gnn:
  head: exphormer_head           # GNN head type
  layers_post_mp: 3              # Layers post message passing
  batchnorm: True                # Batch normalization toggle
  act: relu                      # Activation function
  dropout: 0.1                   # Dropout rate
